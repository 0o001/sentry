from __future__ import annotations

import tempfile
from pathlib import Path
from typing import Literal, Type

from django.core.management import call_command

from sentry.db.models import BaseModel
from sentry.incidents.models import (
    AlertRule,
    AlertRuleActivity,
    AlertRuleExcludedProjects,
    AlertRuleTrigger,
    AlertRuleTriggerAction,
    AlertRuleTriggerExclusion,
    Incident,
    IncidentActivity,
    IncidentSnapshot,
    IncidentSubscription,
    IncidentTrigger,
    PendingIncidentSnapshot,
    TimeSeriesSnapshot,
)
from sentry.models.actor import Actor
from sentry.models.apiapplication import ApiApplication
from sentry.models.apiauthorization import ApiAuthorization
from sentry.models.apikey import ApiKey
from sentry.models.apitoken import ApiToken
from sentry.models.authenticator import Authenticator
from sentry.models.authidentity import AuthIdentity
from sentry.models.authprovider import AuthProvider
from sentry.models.counter import Counter
from sentry.models.dashboard import Dashboard, DashboardTombstone
from sentry.models.dashboard_widget import DashboardWidget, DashboardWidgetQuery
from sentry.models.email import Email
from sentry.models.environment import Environment, EnvironmentProject
from sentry.models.integrations.sentry_app import SentryApp
from sentry.models.integrations.sentry_app_component import SentryAppComponent
from sentry.models.integrations.sentry_app_installation import SentryAppInstallation
from sentry.models.notificationaction import NotificationAction, NotificationActionProject
from sentry.models.options.option import ControlOption, Option
from sentry.models.options.organization_option import OrganizationOption
from sentry.models.options.project_option import ProjectOption
from sentry.models.options.user_option import UserOption
from sentry.models.organization import Organization
from sentry.models.organizationaccessrequest import OrganizationAccessRequest
from sentry.models.organizationmapping import OrganizationMapping
from sentry.models.organizationmember import OrganizationMember
from sentry.models.organizationmemberteam import OrganizationMemberTeam
from sentry.models.orgauthtoken import OrgAuthToken
from sentry.models.project import Project
from sentry.models.projectbookmark import ProjectBookmark
from sentry.models.projectkey import ProjectKey
from sentry.models.projectownership import ProjectOwnership
from sentry.models.projectredirect import ProjectRedirect
from sentry.models.projectteam import ProjectTeam
from sentry.models.recentsearch import RecentSearch
from sentry.models.relay import Relay, RelayUsage
from sentry.models.repository import Repository
from sentry.models.rule import Rule, RuleActivity
from sentry.models.rulesnooze import RuleSnooze
from sentry.models.savedsearch import SavedSearch
from sentry.models.servicehook import ServiceHook
from sentry.models.team import Team
from sentry.models.user import User
from sentry.models.useremail import UserEmail
from sentry.models.userip import UserIP
from sentry.models.userpermission import UserPermission
from sentry.models.userrole import UserRole, UserRoleUser
from sentry.monitors.models import Monitor, MonitorEnvironment, MonitorLocation
from sentry.runner.commands.backup import DEFAULT_COMPARATORS
from sentry.silo.safety import unguarded_write
from sentry.snuba.models import QuerySubscription, SnubaQuery, SnubaQueryEventType
from sentry.testutils import TransactionTestCase
from sentry.testutils.helpers.backups import (
    ReleaseFixtureGenerator,
    get_exportable_final_derivations_of,
    import_export_from_fixture_then_validate,
)
from tests.sentry.backup import targets

RELEASE_TESTED_MODELS = set()


def mark(*marking: Type | Literal["__all__"]):
    """A function that runs at module load time and marks all models that appear in
    `test_at_head()` below.

    Use the sentinel string "__all__" to indicate that all models are expected."""

    all: Literal["__all__"] = "__all__"
    for model in marking:
        if model == all:
            all_models = get_exportable_final_derivations_of(BaseModel)
            RELEASE_TESTED_MODELS.update({c.__name__ for c in all_models})
            return list(all_models)

        RELEASE_TESTED_MODELS.add(model.__name__)
    return marking


class VersionCompatibilityTests(TransactionTestCase):
    """Ensures that exports generated by prior releases can still be imported and re-exported by
    newer cuts of Sentry.

    The structure of this file is a bit fragile: after every release, a new test for the
    just-released version should be appended to the end of this class definition by invoking
    `bin/generate-backup-test-for-release [RELEASE_VERSION_HERE]`."""

    def setUp(self):
        # TODO(Hybrid-Cloud): Review whether this is the correct route to apply in this case.
        with unguarded_write(using="default"):
            # Reset the Django database.
            call_command("flush", verbosity=0, interactive=False)

    @targets(mark("__all__"))
    def test_at_head(self):
        """Test that the currently checked in code passes a script that hits every `__include_in_export = True` model."""

        return ReleaseFixtureGenerator()(self._testMethodName)

    @targets(
        mark(
            Actor,
            AlertRule,
            AlertRuleActivity,
            AlertRuleExcludedProjects,
            AlertRuleTrigger,
            AlertRuleTriggerAction,
            AlertRuleTriggerExclusion,
            ApiApplication,
            ApiAuthorization,
            ApiKey,
            ApiToken,
            AuthIdentity,
            AuthProvider,
            Authenticator,
            ControlOption,
            Counter,
            Dashboard,
            DashboardTombstone,
            DashboardWidget,
            DashboardWidgetQuery,
            Email,
            Environment,
            EnvironmentProject,
            Incident,
            IncidentActivity,
            IncidentSnapshot,
            IncidentSubscription,
            IncidentTrigger,
            Monitor,
            MonitorEnvironment,
            MonitorLocation,
            NotificationAction,
            NotificationActionProject,
            Option,
            OrgAuthToken,
            Organization,
            OrganizationAccessRequest,
            OrganizationMapping,
            OrganizationMember,
            OrganizationMemberTeam,
            OrganizationOption,
            PendingIncidentSnapshot,
            Project,
            ProjectBookmark,
            ProjectKey,
            ProjectOption,
            ProjectOwnership,
            ProjectRedirect,
            ProjectTeam,
            QuerySubscription,
            RecentSearch,
            Relay,
            RelayUsage,
            Repository,
            Rule,
            RuleActivity,
            RuleSnooze,
            SavedSearch,
            SentryApp,
            SentryAppComponent,
            SentryAppInstallation,
            ServiceHook,
            SnubaQuery,
            SnubaQueryEventType,
            Team,
            TimeSeriesSnapshot,
            User,
            UserEmail,
            UserIP,
            UserOption,
            UserPermission,
            UserRole,
            UserRoleUser,
        )
    )
    def test_at_23_7_1(self):
        with tempfile.TemporaryDirectory() as tmpfile:
            return import_export_from_fixture_then_validate(
                Path(tmpfile), "23.7.1.json", DEFAULT_COMPARATORS
            )
